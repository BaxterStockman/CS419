(function($, document, location, window) {
    $(document).ready(function() {
        /*
         * Redefining the datetimepicker parsing/format to work with moment.js
         * See: http://xdsoft.net/jqplugins/datetimepicker/
         *
         * N.B. This didn't work correctly.  The datetimepicker seems to be
         * pretty buggy, so we're just leaving it as-is.
         */
        /*
        Date.parseDate = function( input, format ){
            return moment(input,format).toDate();
        };

        Date.prototype.dateFormat = function( format ){
        return moment(this).format(format);
        };

        var datetimepickerOptions = {
            format: 'DD-MM-YYYY h:mm A',
            formatTime: 'h:mm A',
            formatDate: 'DD-MM-YYYY',
        };
        // Attach datetimepicker widgets to start and end time fields
        $('#start').datetimepicker(datetimepickerOptions);
        $('#end').datetimepicker(datetimepickerOptions);
        */

        $('#start').datetimepicker();
        $('#end').datetimepicker();

        //$('#results').hide();
        $('#noresults').hide();

        // Create empty object to attendees
        var attendees = {};

        /*
         * @param {Object} obj: An object whose values you want to display in a
         *  simple list
         *
         * @param {string} key: A string representing the name of an object
         *  property
         *
         * @return: Create a list item with a clickable dismiss icon.  When clicked, the
         *  item is removed both from the displayed list and from the 'obj'
         *  object
         */
        var liDismiss = function(obj, key) {
            var btn = $('<button/>', {
                type: 'button',
                class: 'close pull-right',
                html: '&times',
                click: function() {
                    $(this).parent().remove();
                    delete obj[key];
                }
            }).attr('aria-hidden', true);

            var li = $('<li/>', {
                class: 'list-group-item',
            }).text(key).append(btn);
            return li;
        };

        // Curried form of liDismiss(), with 'attendees' passed as the object
        var liDismissAttendees = function(v) {
            return liDismiss(attendees, v);
        }

        var trFreeTimes = function(obj) {
            newRowText = '<td>' + obj['start'] + '</td><td>' + obj['end'] + '</td>';
            newPeopleList = ''
            $.each(obj['onids'], function(index, value) {
                newPeopleList += '<li>' + value['fname'] + ' ' + value['lname'] + '</li>';
            });
            var people_ul = $('<ul/>', {
                    class: 'list-unstyled',
                }).append(newPeopleList),
                people_td = $('<td/>').append(people_ul);

            return $('<tr/>').append(newRowText).append(people_ul);
        };

        // For each item in 'attendees', construct a list item
        var buildAttendeesList = function() {
            // Clear out list
            $('#attendees').empty();

            // Replace list with new list containing all items of interest
            $.each(attendees, function(key, value) {
                $('#attendees').append(liDismissAttendees(key));
            });
        };

        /*
         * @param {string} name: At minimum, a first and last name
         *
         * @return: Splits a name on whitespace and returns the
         *  first and last items in the list as a two-item list.
         */
        var getUserNames = function(name) {
            var names = name.split(/\W+/),
                lname = names.pop() || '',
                fname = names.shift() || '';

            if(lname.length === 0 || fname.length === 0) {
                return null;
            } else {
                var ret = {};
                ret[name] = {'fname': fname, 'lname': lname};
                return ret;
            }
        };

        // From http://css-tricks.com/snippets/jquery/serialize-form-to-json/
        $.fn.serializeObject = function() {
            var obj = {};
            var arr = this.serializeArray();

            $.each(arr, function() {
                if (obj[this.name]) {
                    if (!obj[this.name].push) {
                        obj[this.name] = [obj[this.name]];
                    }
                    obj[this.name].push(this.value || '');
                } else {
                    obj[this.name] = this.value || '';
                }
            });
            return obj;
        };


        // Query the server for free times for the given users
        $("#findtimes").click(function(event) {
            form_arr = $(this).parent().serializeObject();
            form_arr['users'] = attendees;

            $.ajax({
                type: 'POST',
                url: '{{ url_for("find_times") }}',
                contentType: 'application/json',
                data: JSON.stringify(form_arr),
                success: function(result) {
                    console.log('search result: ' + JSON.stringify(result));
                    var free_ranges = result['free_ranges'];
                    if (free_ranges.length > 0) {
                        $('#noresults').hide();
                        $.each(free_ranges, function(index, value) {
                            console.log(index + ' ' + JSON.stringify(value));
                            //$('#freetimesBody').append(trFreeTimes(value));
                        });
                    } else {
                        $('#noresults').show();
                    }
                    $('#placeholder').hide();
                    $('#results').show();
                },
                error: function(e) {
                    console.log(e);
                }
            });

            // Prevent form submission
            event.preventDefault();
        });

        // Reset error class and popover
        $(":text").focus(function(event) {
            $("#finduser").removeClass('has-error');
            $("#onid").popover('destroy');
        });

        $('#adduser').click(function (event) {
            // Grab entered text
            attendee = $("#onid").val();

            name_query = getUserNames(attendee);

            // If the user didn't enter a name, add an error class to the text
            // input and provide a pop-up message
            if(name_query === null) {
                $("#finduser").addClass('has-error');
                $("#onid").popover({
                    content: "You must enter a first and last name.",
                    placement: 'top',
                });
                $("#onid").popover('show');
                return;
            }

            $.ajax({
                type: 'POST',
                url: '{{ url_for("run_query") }}',
                contentType: 'application/json',
                data: JSON.stringify(name_query),
                success: function(result) {
                    result_data = result['onids'][0];
                    onid = result_data['onid'];
                    if(onid != null) {
                        fname = result_data['fname'];
                        lname = result_data['lname'];

                        query_fname = name_query[attendee]['fname']
                        query_lname = name_query[attendee]['lname']

                        // Make sure that the returned ONID credentials match
                        // who we're looking for
                        if(fname.toLowerCase() === query_fname.toLowerCase()
                           && lname.toLowerCase() === query_lname.toLowerCase()) {
                            // Add to the dictionary, if it's not already there
                            if(! attendees[attendee] && attendee != "") {
                                attendees[attendee] = result_data;
                            }

                            // Rebuild attendees object
                            buildAttendeesList();

                            // Reset text field
                            $("#onid").val("");
                        // The following two else clauses deal with incorrect
                        // from the username query
                        } else {
                            $("#finduser").addClass('has-error');
                            $("#onid").popover({
                                content: "Nobody by that name found.",
                                placement: 'top',
                            });
                            $("#onid").popover('show');
                            return;
                        }
                    } else {
                        $("#finduser").addClass('has-error');
                        $("#onid").popover({
                            content: "Nobody by that name found.",
                            placement: 'top',
                        });
                        $("#onid").popover('show');
                        return;
                    }

                },
                error: function(e) {
                    console.log(e);
                }
            });

            // Automatically select the text field again
            $("#onid").select();

            event.preventDefault();
        });
    });
})(jQuery, document, location, window);
